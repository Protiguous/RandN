#n Wyam.Highlight
#n Wyam.Minification
#n -s ./packages/ -e Ociaw.Wyam.SlimSamson

#recipe Docs
#theme Ociaw.Wyam.SlimSamson

using Microsoft.CodeAnalysis;

Settings[Keys.Host] = "randn.ociaw.com";
Settings[DocsKeys.Title] = "RandN";
Settings[DocsKeys.SourceFiles] = @"../../src/**/{!.git,!bin,!obj,!packages,!Tests,!Benchmarks,}/**/*.cs";
Settings[DocsKeys.IncludeGlobalNamespace] = false;
Settings[DocsKeys.Logo] = "assets/img/randn-logo-wide.svg";
Settings[DocsKeys.BaseEditUrl] = "https://github.com/ociaw/RandN/edit/master/src/";
Settings[Wyam.Web.WebKeys.EditFilePath] = "";

// Minify indexing pages
Pipelines["BlogIndexes"].InsertBefore("WriteFiles", new MinifyHtml());
Pipelines["BlogCategories"].InsertBefore("WriteFiles", new MinifyHtml());
Pipelines["BlogTags"].InsertBefore("WriteFiles", new MinifyHtml());
Pipelines["BlogAuthors"].InsertBefore("WriteFiles", new MinifyHtml());
Pipelines["BlogArchives"].InsertBefore("WriteFiles", new MinifyHtml());
Pipelines["BlogYearlyArchives"].InsertBefore("WriteFiles", new MinifyHtml());

((If)Pipelines["ApiIndex"][0])[0].InsertBeforeLast<WriteFiles>(new MinifyHtml());

// Add syntax highlighting to code blocks and minify generated html
Pipelines["RenderBlogPosts"].InsertBefore
(
    nameof(Wyam.Web.Pipelines.RenderBlogPosts.WriteFiles),
    new Highlight(),
    new MinifyHtml()
);

Pipelines["RenderPages"].InsertBefore
(
    nameof(Wyam.Web.Pipelines.RenderPages.WriteFiles),
    new Highlight(),
    new MinifyHtml()
);

((If)Pipelines["RenderApi"][0])[0].InsertBeforeLast<WriteFiles>
(
    new Highlight(),
    new MinifyHtml()
);

// Minify generated CSS files
Pipelines["Sass"].InsertBeforeLast<WriteFiles>(new MinifyCss());
Pipelines["Less"].InsertBeforeLast<WriteFiles>(new MinifyCss());

// Minify static resources
Pipelines.InsertAfter
(
    "Resources",
    "MinifyResources",

    ReadFiles("**/*.css"),
    MinifyCss(),
    WriteFiles(".css"),

    ReadFiles("**/*.js"),
    MinifyJs(),
    WriteFiles(".js"),

    ReadFiles("**/*.svg"),
    MinifyXml(),
    MinifyCss(),
    WriteFiles(".svg")
);

/*
   This works around a bug in Wyam where nested classes with the same name overwrite each other.
   We essentially have to rebuild a part of the RenderAPI pipeline from scratch, and replace the
   buggy method a corrected version.
*/

// Replacing the part of the API pipeline from
// https://github.com/Wyamio/Wyam/blob/94a3f1ba258b7d1aaf4f9e55b222697698346396/src/recipes/Wyam.Docs/Pipelines/Api.cs

var replacementExecute = new Execute(ctx => new AnalyzeCSharp()
                            .WithWritePath(DefaultWritePath)
                            .WhereNamespaces(ctx.Bool(DocsKeys.IncludeGlobalNamespace))
                            .WherePublic()
                            .WithCssClasses("code", "cs")
                            .WithWritePathPrefix(ctx.DirectoryPath(DocsKeys.ApiPath))
                            .WithAssemblies(ctx.List<string>(DocsKeys.AssemblyFiles))
                            .WithProjects(ctx.List<string>(DocsKeys.ProjectFiles))
                            .WithSolutions(ctx.List<string>(DocsKeys.SolutionFiles))
                            .WithAssemblySymbols()
                            .WithImplicitInheritDoc(ctx.Bool(DocsKeys.ImplicitInheritDoc)));

((If)Docs.Api[0])[0].ReplaceFirst<Execute>(replacementExecute);

// We're changing the default write path for nested classes to ensure they're unique.
// https://github.com/Wyamio/Wyam/blob/5e729cec0a291a90c02848b366a3dd7ce9ac9ef2/src/extensions/Wyam.CodeAnalysis/AnalyzeCSharp.cs#L415
private static FilePath DefaultWritePath(IMetadata metadata)
{
    DirectoryPath prefix = "api/";
    IDocument namespaceDocument = metadata.Document(CodeAnalysisKeys.ContainingNamespace);
    FilePath writePath = null;

    if (metadata.String(CodeAnalysisKeys.Kind) == SymbolKind.Assembly.ToString())
    {
        // Assemblies output to the index page in a folder of their name
        writePath = new FilePath($"{metadata[CodeAnalysisKeys.DisplayName]}/index.html");
    }
    else if (metadata.String(CodeAnalysisKeys.Kind) == SymbolKind.Namespace.ToString())
    {
        // Namespaces output to the index page in a folder of their full name
        // If this namespace does not have a containing namespace, it's the global namespace
        writePath = new FilePath(namespaceDocument == null ? "global/index.html" : $"{metadata[CodeAnalysisKeys.DisplayName]}/index.html");
    }
    else if (metadata.String(CodeAnalysisKeys.Kind) == SymbolKind.NamedType.ToString())
    {
        // We've changed this branch to workaround non-unique symbol ids by generating our own
        var symbol = (ISymbol)metadata[CodeAnalysisKeys.Symbol];
        var symbolId = GetId(symbol);

        // Types output to the index page in a folder of their SymbolId under the folder for their namespace
        writePath = new FilePath(namespaceDocument?[CodeAnalysisKeys.ContainingNamespace] == null
            ? $"global/{symbolId}/index.html"
            : $"{namespaceDocument[CodeAnalysisKeys.DisplayName]}/{symbolId}/index.html");
    }
    else
    {
        // Members output to a page equal to their SymbolId under the folder for their type
        IDocument containingTypeDocument = metadata.Document(CodeAnalysisKeys.ContainingType);
        string containingPath = containingTypeDocument.FilePath(Keys.WritePath).FullPath;
        if (prefix != null && containingPath.StartsWith(prefix.FullPath + "/"))
        {
            containingPath = containingPath.Substring(prefix.FullPath.Length + 1);
        }
        writePath = new FilePath(containingPath.Replace("index.html", metadata.String(CodeAnalysisKeys.SymbolId) + ".html"));
    }

    // Add the prefix
    if (prefix != null)
    {
        writePath = prefix.CombineFile(writePath);
    }

    return writePath;
}

// These two methods are based of
// https://github.com/Wyamio/Wyam/blob/5e729cec0a291a90c02848b366a3dd7ce9ac9ef2/src/extensions/Wyam.CodeAnalysis/Analysis/AnalyzeSymbolVisitor.cs

// We've modified this to call itself recursively on the containing symbol if the containing type is not null
// We don't strictly need to handle anything other than types, but there's no harm in leaving in the code.
private static string GetId(ISymbol symbol)
{
    if (symbol is IAssemblySymbol)
    {
        return symbol.Name + ".dll";
    }
    if (symbol is INamespaceOrTypeSymbol)
    {
        char[] id = symbol.ContainingType == null ?
                    symbol.MetadataName.ToCharArray() :
                    (GetId(symbol.ContainingSymbol) + "." + symbol.MetadataName).ToCharArray();

        for (int c = 0; c < id.Length; c++)
        {
            if (!char.IsLetterOrDigit(id[c]) && id[c] != '-' && id[c] != '.')
            {
                id[c] = '_';
            }
        }
        return new string(id);
    }

    // Get a hash for anything other than namespaces or types
    return BitConverter.ToString(BitConverter.GetBytes(Crc32.Calculate(symbol.GetDocumentationCommentId() ?? GetFullName(symbol)))).Replace("-", string.Empty);
}

// This is copied verbatim
internal static string GetFullName(ISymbol symbol)
{
    return symbol.ToDisplayString(new SymbolDisplayFormat(
        typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypes,
        genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters,
        parameterOptions: SymbolDisplayParameterOptions.IncludeType,
        memberOptions: SymbolDisplayMemberOptions.IncludeParameters,
        miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes));
}
