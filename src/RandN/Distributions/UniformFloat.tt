<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ output extension=".cs" #>
<#
var parameters = new (Type type, Type unsigned, Int32 bitsToDiscard)[]
{
    (typeof(Single), typeof(UInt32), 32 - 23),
    (typeof(Double), typeof(UInt64), 64 - 52),
};
#>
using System;
using System.Diagnostics;
using RandN.Implementation;

/*** This file is auto generated - any changes made here will be lost. ***/
namespace RandN.Distributions
{
    internal static class UniformFloat
    {
<# foreach (var param in parameters)
{
    String type = param.type.Name;
    String unsigned = param.unsigned.Name;
#>
        /// <summary>
        /// Creates a <see cref="UniformFloat{<#= type #>}" /> with an exclusive upper bound. Should not
        /// be used directly; instead, use <see cref="Uniform.New(<#= type #>, <#= type #>)" />.
        /// </summary>
        /// <exception cref="ArgumentOutOfRangeException">
        /// Thrown when <paramref name="low"/> is greater than or equal to <paramref name="high"/> or when
        /// <paramref name="low"/> or <paramref name="high"/> are non-finite or NaN.
        /// </exception>
        public static UniformFloat<<#= type #>> Create(<#= type #> low, <#= type #> high)
        {
            if (low >= high)
                throw new ArgumentOutOfRangeException(nameof(high), $"{nameof(high)} ({high}) must be higher than {nameof(low)} ({low}).");
            if (<#= type #>.IsInfinity(low))
                throw new ArgumentOutOfRangeException(nameof(low), low, "Must be finite.");
            if (<#= type #>.IsInfinity(high))
                throw new ArgumentOutOfRangeException(nameof(high), high, "Must be finite.");
            if (<#= type #>.IsNaN(low))
                throw new ArgumentOutOfRangeException(nameof(low), low, "Must be a number.");
            if (<#= type #>.IsNaN(high))
                throw new ArgumentOutOfRangeException(nameof(high), high, "Must be a number.");

            const Int32 bitsToDiscard = <#= param.bitsToDiscard #>;

            <#= type #> maxRand = (<#= unsigned #>.MaxValue >> bitsToDiscard).IntoFloatWithExponent(0) - 1;
            <#= type #> scale = (high - low).ForceStandardPrecision();
            while (true)
            {
                var maxPossible = (scale * maxRand + low).ForceStandardPrecision();
                var aboveMax = maxPossible >= high;
                if (!aboveMax)
                    break;

                scale = (scale.ToBits() - 1).ToFloat().ForceStandardPrecision();
            }

            Debug.Assert(0.0 <= scale);
            Debug.Assert(!<#= type #>.IsPositiveInfinity(scale));
            return new UniformFloat<<#= type #>>(low, scale);
        }

        /// <summary>
        /// Creates a <see cref="UniformFloat{<#= type #>}" /> with an exclusive lower bound. Should not
        /// be used directly; instead, use <see cref="Uniform.New(<#= type #>, <#= type #>)" />.
        /// </summary>
        /// <exception cref="ArgumentOutOfRangeException">
        /// Thrown when <paramref name="low"/> is greater than <paramref name="high"/>.
        /// </exception>
        public static UniformFloat<<#= type #>> CreateInclusive(<#= type #> low, <#= type #> high)
        {
            if (low > high)
                throw new ArgumentOutOfRangeException(nameof(high), $"{nameof(high)} ({high}) must be higher than or equal to {nameof(low)} ({low}).");
            if (<#= type #>.IsInfinity(low))
                throw new ArgumentOutOfRangeException(nameof(low), low, "Must be finite.");
            if (<#= type #>.IsInfinity(high))
                throw new ArgumentOutOfRangeException(nameof(high), high, "Must be finite.");
            if (<#= type #>.IsNaN(low))
                throw new ArgumentOutOfRangeException(nameof(low), low, "Must be a number.");
            if (<#= type #>.IsNaN(high))
                throw new ArgumentOutOfRangeException(nameof(high), high, "Must be a number.");

            const Int32 bitsToDiscard = <#= param.bitsToDiscard #>;

            <#= type #> maxRand = (<#= unsigned #>.MaxValue >> bitsToDiscard).IntoFloatWithExponent(0) - 1;
            <#= type #> scale = ((high - low) / maxRand).ForceStandardPrecision();
            while (true)
            {
                var maxPossible = (scale * maxRand + low);
                var aboveMax = maxPossible > high;
                if (!aboveMax)
                    break;

                scale = (scale.ToBits() - 1).ToFloat().ForceStandardPrecision();
            }

            Debug.Assert(0.0 <= scale);
            Debug.Assert(!<#= type #>.IsPositiveInfinity(scale));
            return new UniformFloat<<#= type #>>(low, scale);
        }
<#
}
#>
    }

    /// <summary>
    /// Implements a Uniform <see cref="IDistribution{TResult}"/> for <see cref="Single" /> and <see cref="Double" />.
    /// Use of any other type results in a runtime exception.
    /// </summary>
    public readonly struct UniformFloat<T> : IDistribution<T>
        // We're extremely restrictive here to discourage people from trying to use non-supported type for T
        where T : struct, IComparable, IComparable<T>, IConvertible, IEquatable<T>, IFormattable
    {
        private readonly T _low;
        private readonly T _scale;

        internal UniformFloat(T low, T scale)
        {
            _low = low;
            _scale = scale;
        }

        /// <inheritdoc />
        public Boolean TrySample<TRng>(TRng rng, out T result) where TRng : notnull, IRng
        {
            result = Sample(rng);
            return true;
        }

        /// <inheritdoc />
        public T Sample<TRng>(TRng rng) where TRng : notnull, IRng
        {
<# foreach (var param in parameters)
{
    String type = param.type.Name;
#>
            if (typeof(T) == typeof(<#= type #>))
                return (T)(Object)Sample<#= type #>(rng);
<#
}
#>
            throw new NotSupportedException($"Type {typeof(T)} is not supported.");
        }

<# foreach (var param in parameters)
{
    String type = param.type.Name;
    String unsigned = param.unsigned.Name;
#>
        private <#= type #> Sample<#= type #><TRng>(TRng rng) where TRng : notnull, IRng
        {
            const Int32 BitsToDiscard = <#= param.bitsToDiscard #>;
            // Generate a value in the range [1, 2)
            var sample = rng.Next<#= unsigned #>();
            <#= type #> value12 = (sample >> BitsToDiscard).IntoFloatWithExponent(0);

            // Get a value in the range [0, 1) in order to avoid
            // overflowing into infinity when multiplying with scale
            <#= type #> value01 = value12 - 1;
            <#= type #> scale = (<#= type #>)(Object)_scale;
            <#= type #> low = (<#= type #>)(Object)_low;

            return value01 * scale + low;
        }
<#
}
#>
    }
}
