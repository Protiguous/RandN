<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ output extension=".cs" #>
<#
var parameters = new (Type type, String floatSuffix, String uintSuffix, Int32 bitsDiscarded)[]
{
    (typeof(Single), "f", "u", 32 - 23),
    (typeof(Double), "d", "ul", 64 - 52),
};
#>
using System;
using Xunit;
using RandN.Rngs;

/*** This file is auto generated - any changes made here will be lost. ***/
namespace RandN.Distributions
{
    public class UniformFloatTests
    {
        [Fact]
        public void BadRange()
        {
<# foreach (var param in parameters)
{
    String type = param.type.Name;
    String floatSuffix = param.floatSuffix;
    String uintSuffix = param.uintSuffix;
    String bitsDiscarded = param.bitsDiscarded.ToString();
#>
            // Equal
            Assert.Throws<ArgumentOutOfRangeException>("high", () => Uniform.New(0<#= floatSuffix #>, 0<#= floatSuffix #>));
            Assert.Throws<ArgumentOutOfRangeException>("high", () => Uniform.New(<#= type #>.MaxValue, <#= type #>.MaxValue));
            Assert.Throws<ArgumentOutOfRangeException>("high", () => Uniform.New(<#= type #>.MinValue, <#= type #>.MinValue));
            // Reversed
            Assert.Throws<ArgumentOutOfRangeException>("high", () => Uniform.New(10.0<#= floatSuffix #>, 10.0<#= floatSuffix #>));
            Assert.Throws<ArgumentOutOfRangeException>("high", () => Uniform.New(9001.0<#= floatSuffix #>, -666.0<#= floatSuffix #>));
            Assert.Throws<ArgumentOutOfRangeException>("high", () => Uniform.New(<#= type #>.MaxValue, <#= type #>.MinValue));
            // Infinities
            Assert.Throws<ArgumentOutOfRangeException>("low", () => Uniform.New(<#= type #>.NegativeInfinity, 0));
            Assert.Throws<ArgumentOutOfRangeException>("high", () => Uniform.New(0, <#= type #>.PositiveInfinity));
            Assert.Throws<ArgumentOutOfRangeException>(() => Uniform.New(<#= type #>.PositiveInfinity, 0));
            Assert.Throws<ArgumentOutOfRangeException>(() => Uniform.New(0, <#= type #>.NegativeInfinity));
            Assert.Throws<ArgumentOutOfRangeException>(() => Uniform.New(<#= type #>.PositiveInfinity, <#= type #>.PositiveInfinity));
            Assert.Throws<ArgumentOutOfRangeException>(() => Uniform.New(<#= type #>.NegativeInfinity, <#= type #>.NegativeInfinity));
            Assert.Throws<ArgumentOutOfRangeException>(() => Uniform.New(<#= type #>.NegativeInfinity, <#= type #>.PositiveInfinity));
            // NaNs
            Assert.Throws<ArgumentOutOfRangeException>("low", () => Uniform.New(<#= type #>.NaN, 0));
            Assert.Throws<ArgumentOutOfRangeException>("high", () => Uniform.New(0, <#= type #>.NaN));
            Assert.Throws<ArgumentOutOfRangeException>(() => Uniform.New(<#= type #>.NaN, <#= type #>.NaN));
            // Mixed NaN / Infinity
            Assert.Throws<ArgumentOutOfRangeException>(() => Uniform.New(<#= type #>.NaN, <#= type #>.PositiveInfinity));
            Assert.Throws<ArgumentOutOfRangeException>(() => Uniform.New(<#= type #>.PositiveInfinity, <#= type #>.NaN));
            Assert.Throws<ArgumentOutOfRangeException>(() => Uniform.New(<#= type #>.NaN, <#= type #>.NegativeInfinity));
            Assert.Throws<ArgumentOutOfRangeException>(() => Uniform.New(<#= type #>.NegativeInfinity, <#= type #>.NaN));

            // Reversed
            Assert.Throws<ArgumentOutOfRangeException>("high", () => Uniform.NewInclusive(10.0<#= floatSuffix #>, 9.0<#= floatSuffix #>));
            Assert.Throws<ArgumentOutOfRangeException>("high", () => Uniform.NewInclusive(9001.0<#= floatSuffix #>, -666.0<#= floatSuffix #>));
            Assert.Throws<ArgumentOutOfRangeException>("high", () => Uniform.NewInclusive(<#= type #>.MaxValue, <#= type #>.MinValue));
            // Infinities
            Assert.Throws<ArgumentOutOfRangeException>("low", () => Uniform.NewInclusive(<#= type #>.NegativeInfinity, 0));
            Assert.Throws<ArgumentOutOfRangeException>("high", () => Uniform.NewInclusive(0, <#= type #>.PositiveInfinity));
            Assert.Throws<ArgumentOutOfRangeException>(() => Uniform.NewInclusive(<#= type #>.PositiveInfinity, 0));
            Assert.Throws<ArgumentOutOfRangeException>(() => Uniform.NewInclusive(0, <#= type #>.NegativeInfinity));
            Assert.Throws<ArgumentOutOfRangeException>(() => Uniform.NewInclusive(<#= type #>.PositiveInfinity, <#= type #>.PositiveInfinity));
            Assert.Throws<ArgumentOutOfRangeException>(() => Uniform.NewInclusive(<#= type #>.NegativeInfinity, <#= type #>.NegativeInfinity));
            Assert.Throws<ArgumentOutOfRangeException>(() => Uniform.NewInclusive(<#= type #>.NegativeInfinity, <#= type #>.PositiveInfinity));
            // NaNs
            Assert.Throws<ArgumentOutOfRangeException>("low", () => Uniform.NewInclusive(<#= type #>.NaN, 0));
            Assert.Throws<ArgumentOutOfRangeException>("high", () => Uniform.NewInclusive(0, <#= type #>.NaN));
            Assert.Throws<ArgumentOutOfRangeException>(() => Uniform.NewInclusive(<#= type #>.NaN, <#= type #>.NaN));
            // Mixed NaN / Infinity
            Assert.Throws<ArgumentOutOfRangeException>(() => Uniform.NewInclusive(<#= type #>.NaN, <#= type #>.PositiveInfinity));
            Assert.Throws<ArgumentOutOfRangeException>(() => Uniform.NewInclusive(<#= type #>.PositiveInfinity, <#= type #>.NaN));
            Assert.Throws<ArgumentOutOfRangeException>(() => Uniform.NewInclusive(<#= type #>.NaN, <#= type #>.NegativeInfinity));
            Assert.Throws<ArgumentOutOfRangeException>(() => Uniform.NewInclusive(<#= type #>.NegativeInfinity, <#= type #>.NaN));

<#
}
#>
        }

        [Fact]
        public void FloatTest()
        {
            var rng = Pcg32.Create(252, 11634580027462260723ul);
            var zeroRng = new StepRng(0) { Increment = 0 };
            var maxRng = new StepRng(0xFFFF_FFFF_FFFF_FFFF) { Increment = 0 };

<# foreach (var param in parameters)
{
    String type = param.type.Name;
    String floatSuffix = param.floatSuffix;
    String uintSuffix = param.uintSuffix;
    String bitsDiscarded = param.bitsDiscarded.ToString();
#>
            var vectors<#= type #> = new (<#= type #>, <#= type #>)[]
            {
                (0.0<#= floatSuffix #>, 100.0<#= floatSuffix #>),
                (-1e35<#= floatSuffix #>, -1e25<#= floatSuffix #>),
                (1e-35<#= floatSuffix #>, 1e-25<#= floatSuffix #>),
                (-1e35<#= floatSuffix #>, 1e35<#= floatSuffix #>),
                (0<#= uintSuffix #>.ToFloat(), 3<#= uintSuffix #>.ToFloat()),
                (-10<#= uintSuffix #>.ToFloat(), -1<#= uintSuffix #>.ToFloat()),
                (-5<#= uintSuffix #>.ToFloat(), 0.0<#= floatSuffix #>),
                (-7<#= uintSuffix #>.ToFloat(), -0.0<#= floatSuffix #>),
                (10.0<#= floatSuffix #>, <#= type #>.MaxValue),
                (-100.0<#= floatSuffix #>, <#= type #>.MaxValue),
                (-<#= type #>.MaxValue / 5.0<#= floatSuffix #>, <#= type #>.MaxValue),
                (-<#= type #>.MaxValue, <#= type #>.MaxValue / 5.0<#= floatSuffix #>),
                (-<#= type #>.MaxValue * 0.8<#= floatSuffix #>, <#= type #>.MaxValue * 0.7<#= floatSuffix #>),
                (-<#= type #>.MaxValue, <#= type #>.MaxValue),
            };

            foreach ((var low, var high) in vectors<#= type #>)
            {
                var uniform = Uniform.New(low, high);
                var inclusiveUniform = Uniform.NewInclusive(low, high);
                for (var i = 0; i < 100; i++)
                {
                    var exclusive = uniform.Sample(rng);
                    Assert.True(low <= exclusive && exclusive < high);
                    var inclusive = uniform.Sample(rng);
                    Assert.True(low <= inclusive && inclusive <= high);
                }

                Assert.Equal(low, Uniform.NewInclusive(low, low).Sample(rng));

                Assert.Equal(low, uniform.Sample(zeroRng));
                Assert.Equal(low, inclusiveUniform.Sample(zeroRng));
                Assert.True(uniform.Sample(maxRng) < high);
                Assert.True(inclusiveUniform.Sample(maxRng) <= high);

                // Don't run this test for really tiny differences between high and low
                // since for those rounding might result in selecting high for a very
                // long time.
                if (high - low > 0.0001)
                {
                    var loweringMaxRng = new StepRng(0xFFFF_FFFF_FFFF_FFFF) { Increment = unchecked((UInt64)(-1L << <#= bitsDiscarded #>)) };
                    Assert.True(uniform.Sample(loweringMaxRng) < high);
                    Assert.True(uniform.Sample(loweringMaxRng) < high);
                }
            }

            var max<#= type #>Inclusive = Uniform.NewInclusive(<#= type #>.MaxValue, <#= type #>.MaxValue);
            Assert.Equal(<#= type #>.MaxValue, max<#= type #>Inclusive.Sample(rng));
            var min<#= type #>Inclusive = Uniform.NewInclusive(-<#= type #>.MaxValue, -<#= type #>.MaxValue);
            Assert.Equal(-<#= type #>.MaxValue, min<#= type #>Inclusive.Sample(rng));
<#
}
#>
        }

<# foreach (var param in parameters)
{
    String type = param.type.Name;
    String floatSuffix = param.floatSuffix;
    String uintSuffix = param.uintSuffix;
    String bitsDiscarded = param.bitsDiscarded.ToString();
#>
        [Fact]
        public void Average<#= type #>s()
        {
            const Int32 iterations = 10_000;

            static void Average(<#= type #> low, <#= type #> high, UInt64 seed)
            {
                var populationMean = high / 2 + low / 2;
                var popStdDev = 1.0 / Math.Sqrt(3) * (high / 2 - low / 2);

                var exclusiveDist = Uniform.New(low, high);
                var inclusiveDist = Uniform.NewInclusive(low, high);
                var rng = Pcg32.Create(789 + seed, 11634580027462260723ul);

                Double exclusiveMean = 0;
                Double inclusiveMean = 0;
                for (var i = 0; i < iterations; i++)
                {
                    var exclusive = rng.Sample(exclusiveDist);
                    var exclusiveDelta = exclusive - exclusiveMean;
                    exclusiveMean += exclusiveDelta / (i + 1);
                    Assert.True(low <= exclusive);
                    Assert.True(exclusive < high);

                    var inclusive = rng.Sample(inclusiveDist);
                    var inclusiveDelta = inclusive - inclusiveMean;
                    inclusiveMean += inclusiveDelta / (i + 1);
                    Assert.True(low <= inclusive);
                    Assert.True(inclusive < high);
                }

                // 99% confidence interval
                const Double z = 2.576;
                var margin = popStdDev / Math.Sqrt(iterations) * z;

                var exclusiveSampleMeanDiff = Math.Abs(populationMean - exclusiveMean);
                Assert.True(exclusiveSampleMeanDiff < margin);
                var inclusiveSampleMeanDiff = Math.Abs(populationMean - inclusiveMean);
                Assert.True(inclusiveSampleMeanDiff < margin);
            }

            Average(0<#= floatSuffix #>, 1000<#= floatSuffix #>, 0);
            Average(0<#= floatSuffix #>, 1<#= floatSuffix #>, 1);
            Average(-50.0<#= floatSuffix #>, 50.0<#= floatSuffix #>, 2);
            Average(0<#= floatSuffix #>, <#= type #>.MaxValue, 3);
            Average(<#= type #>.MinValue, 0<#= floatSuffix #>, 4);
            Average(38.9<#= floatSuffix #>, 64.6<#= floatSuffix #>, 5);
            Average(1e-35<#= floatSuffix #>, 1e-30<#= floatSuffix #>, 6);
        }

<#
}
#>
    }
}
